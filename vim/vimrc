
set nocompatible                    " Must come first because it changes other options.

execute pathogen#infect()
call pathogen#helptags()            " Generate helptags for everything in ‘runtimepath’

syntax enable                       " Turn on syntax highlighting.
syntax on                           " Turn on syntax highlighting.
filetype plugin indent on           " Turn on file type detection.

set omnifunc=syntaxcomplete#Complete

runtime macros/matchit.vim          " Load the matchit plugin.

" INDENTATION
set autoindent                      " Set auto indent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab                       " Use spaces instead of tabs
set nowrap
set showcmd                         " Display incomplete commands.
set showmode                        " Display the mode you're in.
set showmatch                       " Show bracket matches
set backspace=indent,eol,start      " Intuitive backspacing.
set hidden                          " Handle multiple buffers better.
set mouse=a                         " Enable mouse support
set wildmenu                        " Enhanced command line completion.
set wildmode=list:longest           " Complete files like a shell.
set ignorecase                      " Case-insensitive searching.
set smartcase                       " But case-sensitive if expression contains a capital letter.
set number                          " Show line numbers.
set ruler                           " Show cursor position.
set incsearch                       " Highlight matches as you type.
set hlsearch                        " Highlight matches.
set scrolloff=5                     " Show 3 lines of context around the cursor.
set title                           " Set the terminal's title
set visualbell                      " No beeping.
set nobackup                        " Don't make a backup before overwriting a file.
set nowritebackup                   " And again.
set directory=$HOME/.vim/tmp//,.    " Keep swap files in one location
set noswapfile                      " Don't make any swap files
set laststatus=2                    " Show the status line all the time
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P
set showtabline=1                   " 1 to show tabline only when more than one tab is present
set tabline=%!MyTabLine()           " custom tab pages line
set t_Co=256
set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:¶,precedes:«,extends:»

colorscheme dark

" Show syntax highlighting groups for word under cursor nmap <leader>z :call <SID>SynStack()<CR>
nmap <leader>z :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Tab mappings
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

" Buffer mappings
nnoremap <silent> [b :bprevious<CR>	
nnoremap <silent> ]b :bnext<CR>    
nnoremap <silent> [B :bfirst<CR>   
nnoremap <silent> ]B :blast<CR>    

" FileType Settings
let html_no_rendering=1
let g:xml_syntax_folding=1
let g:vim_json_syntax_conceal = 0 " Hiding concealment (inverted commas in JSON)

autocmd FileType xml    setlocal foldmethod=syntax equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
autocmd FileType json   setlocal foldmethod=syntax equalprg=python\ -m\ json.tool
autocmd FileType ruby   setlocal foldmethod=syntax softtabstop=2 shiftwidth=2
autocmd FileType eruby  setlocal foldmethod=indent softtabstop=2 shiftwidth=2
autocmd FileType html   setlocal foldmethod=indent tabstop=2 softtabstop=2 shiftwidth=2
autocmd FileType css    setlocal foldmethod=indent 
autocmd FileType py     setlocal foldmethod=indent tabstop=4 softtabstop=4 shiftwidth=4

" HTML Tools
map notags :%s#<\_.\{-1,}>##g<cr>

" Ruby Tools
" map <leader>r :!ruby %<cr>
" map <leader>r :new <bar> !ruby % 
 
" Python Tools
command Py execute "w ! python3"

" Mapping for NERDTree
map <leader>f :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let NERDTreeIgnore = ['\.DS_Store$']
" autocmd VimEnter * NERDTree

augroup ColorColumnOnlyInInsertMode
    autocmd!
    autocmd InsertEnter * setlocal colorcolumn=80
    autocmd InsertLeave * setlocal colorcolumn=0
augroup END

" Search functionality with FZF & Ag
" https://github.com/junegunn/fzf.vim#global-options
if executable('fzf')

    " Configure the path for FZF binaries
    if has('macunix')
        set rtp+=/usr/local/opt/fzf
    else
        set rtp+=~/.fzf
    endif

    noremap <c-p> :Files<cr>

    if executable('ag')
        command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '--no-color --color-path "38;5;245"', {'options': ['--color', 'hl:228,hl+:228']}, <bang>0)
    endif

    let g:fzf_colors =
                \ { 'fg':    ['fg', 'Normal'],
                \ 'bg':      ['bg', 'Normal'],
                \ 'hl':      ['fg', 'Keyword'],
                \ 'hl+':     ['fg', 'Keyword'],
                \ 'fg+':     ['fg', 'StartifyFile'],
                \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
                \ 'info':    ['fg', 'PreProc'],
                \ 'border':  ['fg', 'Keyword'],
                \ 'prompt':  ['fg', 'Normal'],
                \ 'pointer': ['fg', 'Exception'],
                \ 'marker':  ['fg', 'Keyword'],
                \ 'spinner': ['fg', 'Keyword'],
                \ 'header':  ['fg', 'Keyword'] }
endif

" Resizing windows
nmap <silent> <S-Left> :vertical res -5<CR>
nmap <silent> <S-Right> :vertical res +5<CR>
nmap <silent> <S-Up> :res +5<CR>
nmap <silent> <S-Down> :res -5<CR>

" Startify
let g:startify_session_dir = '~/.vimsessions'
let g:startify_list_order = [ ['Recents'], 'files', ['Current Dir'],'dir', ['Sessions'], 'sessions', ['Bookmarks'], 'bookmarks']
let g:startify_custom_header = [
            \' ____ ____ ____ ',
            \'||v |||i |||m ||',
            \'||__|||__|||__||',
            \'|/__\|/__\|/__\|']

" vim -b : edit binary using xxd-format!
" augroup Binary
"     au!
"     au BufReadPre  *.bin,*.jpg let &bin=1
"     au BufReadPost *.bin,*.jpg if &bin | %!xxd
"     au BufReadPost *.bin,*.jpg set ft=xxd | endif
"     au BufWritePre *.bin,*.jpg if &bin | %!xxd -r
"     au BufWritePre *.bin,*.jpg endif
"     au BufWritePost *.bin,*.jpg if &bin | %!xxd
"     au BufWritePost *.bin,*.jpg set nomod | endif
" augroup END
